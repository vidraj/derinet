Co potřebujeme oproti dosavadnímu souborovému formátu a rozhraní vylepšit:

- umožnit víc rodičovských uzlů (hlavně kvůli kompozici)

- přidat atributy hran (pro formu i funkci, např. forma=sufixace, funkce=zdrobnělina)

- přidat atributy uzlů
   - slovotvorný typ: derivace, kompozice, zkratkové slovo, výpůjčka... co ještě?
   - morfosegmentace - členění lemmatu na morfémy (jen lineární, nebo stromové?)
   - maska morfologického tagu - pseudotag, který má vyplněné jen pozice ("sloupečky"), které zůstávají pro všechny formy lemmatu neměnné
   - bude jich určitě víc a všechny teď nedomyslím, asi by to chtělo i nějakou divokou zónu pro volné přidávání pomocných atributů v budoucnu (co json do posledního sloupčku?)

- promyslet další (neslovotvorné) typy hran
   - měly by být nějak spojené uzly odpovídající pravopisným variantám (myslit/myslet)
   - asi by měla být propojená i homonyma (to teď jsou jen implicitně - identickým lemmatem)

- musíme nějak pořešit identifikaci lexému
   - samozřejmě potřebujeme umět odkázat na rodičovský uzel/uzly
   - současná ídéčka jsou jen dočasná a v každém releasu se mění
   - alternativně by šly použít "dlouhá lemmata" (lemma plus technická přípony) z JH's morfologie, ale ta se mění taky
   - popřípadě by šlo z přípony vytáhnout jen "homonymní číslíčko" (a věci jako glosa už ne - komentář jako součást ID je divný)
   - anebo vymyslet vlastní novou identifikaci lexémů, třeba lemma#tagmaska, tím se drtivá většina homonym rozliší (to si tipuju, neměřil jsem to, ale na masivní produktivní homonymie typu baryton-neživ./baryton-neživ. by to stačit mělo), a teprv tam, kde to nestačí,použít číslíčka
   - v případě "derinet goes multilingual" by ale tyhle "chytré" identifikátory byly možná spíš na překážku

- API - máme perlové (víceméně plně OO, plus pohodlný spouštěč z příkazové řádky) a pythonové (není OO, ale je výrazně rychlejší, nicméně nemá kompletní funkcionalitu a leccos je tam trochu přes ruku)

-------------------------------------------------------

Nástřel řešení souborového formátu pro DeriNet 2.0
- zásadní inspirace: success story formátu CoNLL-U
- tsv, pokud možno co nejmenší množství sloupců
- pořadí řádků bych upravil tak, aby z toho bylo holým okem vidět víc než teď:
   - mezi jednotlivé derivační stromy bych nově přidal prázdný řádek
   - derivační hnízda by byla uspořádaná podle lexikografického pořadí kořenů
   - uspořádání řádků v derivačním hnízdě? Co třeba depth-first, opět s lexikografickým uspořádáním na každém patře
    (ideál: co nejvíc derivačních hran bude realizováno sousedními řádky, depth-first tím pádem určitě lepší než breadth-first)
   - každopádně to musí být deterministické, ať nemáme problém s roundtripem



Přesnější popis souborového formátu, domluvený na schůzce 22. 11. 2018 a doplněný Jonášem:
V současné verzi API je formát vypisovaný následovně:
	print(pretty_id, lemma, techlemma, pos, tag_mask, parent_id,  [(self._ids[p1], self._ids[p2]) for p1, p2 in composition_parents], misc, sep="\t", file=ofile)
Ale identifikátory by měly být neměnné, nečíselné, univerzální. Takže něco s tagovou maskou. (Permalemma)
Techlemma je specifické pro MorfFlex.CZ, takže bychom ho měli přesunout do WILD sekce.
POS je skrytý v tagové masce, ale stejně ho nemůžeme vyhodit, protože tagová maska (morphological features) je typická pro češtinu, ostatní jazyky tam budou mít spíš jenom POS tag. Takže kvůli univerzalitě zachovat.
Zároveň se chceme inspirovat UD, kde to jen jde, takže bychom vzali formát: Univerzální POS tag, jazykově specifický POS tag (pro češtinu tagová maska), morfologické featury (seznam key=value – v UD jsou oddělované svislítkem, my to uděláme po svém).
Chceme označovat informaci o hranách. V UD to dělají pomocí seznamu dvojic (hrana, popis).
	V UD to vypisují jako 14:advmod|16:advmod|18:advmod – tedy seznam dvojic oddělených svislítky, každá dvojice má prvky oddělené dvojtečkou.
My ale budeme seznamy zapisovat jinak – primárním oddělovačem nebude dvojtečka nebo svislítko, ale striktně ampersand, svislítko bude striktně druhotný oddělovač.
	Takže seznam možností bude vypadat jako a=x&b=y|a=z&b=w|a=fň&b=bž
	Ze specifikace UD: „It is possible to declare that a feature has two or more values for a given word: Case=Acc,Dat.“ To taky chceme.
Chtěli bychom zachovat „primárně stromovou strukturu“, takže bychom měli mít sloupec pro hlavního předka, hlavní label této hrany, a pak seznam dalších vlastností – kompoziční hrany, alternativní derivační hrany, …
	Je to kvůli zachování užitečných vlastností vyplývajících ze stromovitosti. Např. že se strukturou dá procházet do hloubky/šířky a každý uzel navštívím právě jednou.
Chceme explicitně zachycovat morfematickou strukturu. Zase asi jako seznam uspořádaných n-tic, které by měly obsahovat:
	- morf (tj. přímý substring slova, tak, že konkatenace všech morfů složí celé lemma),
	- typ (jeden z {předpona, kořen, přípona, koncovka}; nebo tak něco – TODO vyzkoumat jazykově univerzální reprezentaci),
	- morfém (kanonickou podobu morfu),
	- sémantickou informaci nesenou morfémem (?),
	- co ještě?
	- Chceme nějak vyznačovat stromové složení morfémů?
	Problémy: jak vyznačovat cirkumfixy, co nekonkatenativní morfologie? Zatím nebudeme řešit.
Chceme mít v souborech komentáře, značí se # na prvním znaku nové řádky. Formát souboru bych jinak specifikoval jako text v UTF-8, bez BOM, Unixové newlines.

Na schůzce 27. 11. jsme dohodli následující formát:
ID	LEMID	LEMMA	POS	FEATS	SEGMENTATION	PARENTID	RELTYPE	OTHERRELS	JSON
81.2	vybrat#V??????	vybrat	Verb	aspect=def&… (InterSet)	morph=vy&type=prefix&…|morph=br&type=root&…|…	81.1	form=prefixation&function=perfectivization	id=…&type=…|id=…&…|…	{"syn6freq": 12345, "techlemma": vybrat-1, "tagmask": V??????", …}

Slova v každém bloku budou uložená jako průchod stromem do hloubky, aby se minimalizovalo množství sousedních řádků, jejichž uzly nejsou spojené hranou. Sourozenci jsou tříděni lexikograficky podle lemidů nebo tak něco. Jednotlivé stromy jsou taky tříděny, aby to celé bylo deterministické.

Syntakticky je možné zapsat odkaz do stromu bez připojení ke konkrétnímu uzlu – místo odkazu 81.1 se napíše jenom 81 a tím je jasné, který strom.



--------------------------------------------------------

Požadavky na nové pythoní API
- Nikitovou implementací se ověřilo, že to načítání může být rychlé
- ovšem bylo to za cenu ztráty objektového modelu (banálně: v původním perlovém rozhraní byl uzel objekt, což se po zvýšení počtu uzlů ukázalo neúnosné)
- bez objektů se s tím nedělá úplně dobře - především není jasné, co má být ta věc, která reprezentuje uzel

